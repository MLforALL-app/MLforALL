{"ast":null,"code":"const appendProjectToUser = (projID, firestore) => {};\n\nexport const createProject = project => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    // make async call to database\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const authorID = getState().firebase.auth.uid;\n    firestore.collection(\"projects\").add({ ...project,\n      authorFirstName: profile.firstName,\n      authorLastName: profile.lastName,\n      authorID,\n      createdAt: new Date()\n    }).then(() => {\n      // Add projectID to user\n      dispatch({\n        type: \"CREATE_PROJECT\",\n        project\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"CREATE_PROJECT_ERROR\",\n        err\n      });\n    });\n  };\n};\n/*\n\nNote to self from youtube comment\n\nJoel Greek\n1 year ago\nYou probably figured this out already since you wrote this 4 months ago but maybe someone else who watches this video now will ask the same question:\nOne could probably do this in the firestore cloud I guess. (Lesson 32), if you set the 'allow read, write: if request.auth.uid != userId'\nNot sure if this is best practice, (probably not), but it works. cheers!\n\n*/","map":{"version":3,"sources":["/Users/lenny/Coding/Personal/MLforAll/frontend/src/store/actions/projectActions.js"],"names":["appendProjectToUser","projID","firestore","createProject","project","dispatch","getState","getFirebase","getFirestore","profile","firebase","authorID","auth","uid","collection","add","authorFirstName","firstName","authorLastName","lastName","createdAt","Date","then","type","catch","err"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB,CAAE,CAArD;;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACzC,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAArB,KAAuD;AAC7D;AACA,UAAMN,SAAS,GAAGM,YAAY,EAA9B;AACA,UAAMC,OAAO,GAAGH,QAAQ,GAAGI,QAAX,CAAoBD,OAApC;AACA,UAAME,QAAQ,GAAGL,QAAQ,GAAGI,QAAX,CAAoBE,IAApB,CAAyBC,GAA1C;AACAX,IAAAA,SAAS,CACPY,UADF,CACa,UADb,EAEEC,GAFF,CAEM,EACJ,GAAGX,OADC;AAEJY,MAAAA,eAAe,EAAEP,OAAO,CAACQ,SAFrB;AAGJC,MAAAA,cAAc,EAAET,OAAO,CAACU,QAHpB;AAIJR,MAAAA,QAJI;AAKJS,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AALP,KAFN,EASEC,IATF,CASO,MAAM;AACX;AACAjB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE,gBAAR;AAA0BnB,QAAAA;AAA1B,OAAD,CAAR;AACA,KAZF,EAaEoB,KAbF,CAaSC,GAAD,IAAS;AACfpB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE,sBAAR;AAAgCE,QAAAA;AAAhC,OAAD,CAAR;AACA,KAfF;AAgBA,GArBD;AAsBA,CAvBM;AAyBP","sourcesContent":["const appendProjectToUser = (projID, firestore) => {};\n\nexport const createProject = (project) => {\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\n\t\t// make async call to database\n\t\tconst firestore = getFirestore();\n\t\tconst profile = getState().firebase.profile;\n\t\tconst authorID = getState().firebase.auth.uid;\n\t\tfirestore\n\t\t\t.collection(\"projects\")\n\t\t\t.add({\n\t\t\t\t...project,\n\t\t\t\tauthorFirstName: profile.firstName,\n\t\t\t\tauthorLastName: profile.lastName,\n\t\t\t\tauthorID,\n\t\t\t\tcreatedAt: new Date()\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Add projectID to user\n\t\t\t\tdispatch({ type: \"CREATE_PROJECT\", project });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch({ type: \"CREATE_PROJECT_ERROR\", err });\n\t\t\t});\n\t};\n};\n\n/*\n\nNote to self from youtube comment\n\nJoel Greek\n1 year ago\nYou probably figured this out already since you wrote this 4 months ago but maybe someone else who watches this video now will ask the same question:\nOne could probably do this in the firestore cloud I guess. (Lesson 32), if you set the 'allow read, write: if request.auth.uid != userId'\nNot sure if this is best practice, (probably not), but it works. cheers!\n\n*/\n"]},"metadata":{},"sourceType":"module"}