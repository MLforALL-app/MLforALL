{"ast":null,"code":"const appendProjectToUser = (idx, firestore, uid) => {\n  const userRef = firestore.collection(\"users\").doc(uid);\n  userRef.get().then(doc => {\n    const userData = doc.data();\n    console.log(\"THIS IS USER DATA\");\n    console.log(userData);\n    const updated = userData.projects.push(userData.projects[idz]);\n    console.log(\"THIS IS UPDATED\");\n    console.log(updated);\n    userRef.update({ ...userData,\n      projects: updated\n    });\n  });\n};\n\nexport const createProject = project => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    // make async call to database\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const authorID = getState().firebase.auth.uid;\n    firestore.collection(\"projects\").add({ ...project,\n      authorFirstName: profile.firstName,\n      authorLastName: profile.lastName,\n      authorID,\n      createdAt: new Date()\n    }).then(idx => {\n      // Add projectID to user\n      appendProjectToUser(idx, firestore, authorID);\n      dispatch({\n        type: \"CREATE_PROJECT\",\n        project\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"CREATE_PROJECT_ERROR\",\n        err\n      });\n    });\n  };\n};\n/*\n\nNote to self from youtube comment\n\nJoel Greek\n1 year ago\nYou probably figured this out already since you wrote this 4 months ago but maybe someone else who watches this video now will ask the same question:\nOne could probably do this in the firestore cloud I guess. (Lesson 32), if you set the 'allow read, write: if request.auth.uid != userId'\nNot sure if this is best practice, (probably not), but it works. cheers!\n\n*/","map":{"version":3,"sources":["/Users/lenny/Coding/Personal/MLforAll/frontend/src/store/actions/projectActions.js"],"names":["appendProjectToUser","idx","firestore","uid","userRef","collection","doc","get","then","userData","data","console","log","updated","projects","push","idz","update","createProject","project","dispatch","getState","getFirebase","getFirestore","profile","firebase","authorID","auth","add","authorFirstName","firstName","authorLastName","lastName","createdAt","Date","type","catch","err"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,GAAjB,KAAyB;AACpD,QAAMC,OAAO,GAAGF,SAAS,CAACG,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCH,GAAlC,CAAhB;AACAC,EAAAA,OAAO,CAACG,GAAR,GAAcC,IAAd,CAAoBF,GAAD,IAAS;AAC3B,UAAMG,QAAQ,GAAGH,GAAG,CAACI,IAAJ,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,UAAMI,OAAO,GAAGJ,QAAQ,CAACK,QAAT,CAAkBC,IAAlB,CAAuBN,QAAQ,CAACK,QAAT,CAAkBE,GAAlB,CAAvB,CAAhB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAT,IAAAA,OAAO,CAACa,MAAR,CAAe,EACd,GAAGR,QADW;AAEdK,MAAAA,QAAQ,EAAED;AAFI,KAAf;AAIA,GAXD;AAYA,CAdD;;AAgBA,OAAO,MAAMK,aAAa,GAAIC,OAAD,IAAa;AACzC,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAArB,KAAuD;AAC7D;AACA,UAAMrB,SAAS,GAAGqB,YAAY,EAA9B;AACA,UAAMC,OAAO,GAAGH,QAAQ,GAAGI,QAAX,CAAoBD,OAApC;AACA,UAAME,QAAQ,GAAGL,QAAQ,GAAGI,QAAX,CAAoBE,IAApB,CAAyBxB,GAA1C;AACAD,IAAAA,SAAS,CACPG,UADF,CACa,UADb,EAEEuB,GAFF,CAEM,EACJ,GAAGT,OADC;AAEJU,MAAAA,eAAe,EAAEL,OAAO,CAACM,SAFrB;AAGJC,MAAAA,cAAc,EAAEP,OAAO,CAACQ,QAHpB;AAIJN,MAAAA,QAJI;AAKJO,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AALP,KAFN,EASE1B,IATF,CASQP,GAAD,IAAS;AACd;AACAD,MAAAA,mBAAmB,CAACC,GAAD,EAAMC,SAAN,EAAiBwB,QAAjB,CAAnB;AACAN,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE,gBAAR;AAA0BhB,QAAAA;AAA1B,OAAD,CAAR;AACA,KAbF,EAcEiB,KAdF,CAcSC,GAAD,IAAS;AACfjB,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE,sBAAR;AAAgCE,QAAAA;AAAhC,OAAD,CAAR;AACA,KAhBF;AAiBA,GAtBD;AAuBA,CAxBM;AA0BP","sourcesContent":["const appendProjectToUser = (idx, firestore, uid) => {\n\tconst userRef = firestore.collection(\"users\").doc(uid);\n\tuserRef.get().then((doc) => {\n\t\tconst userData = doc.data();\n\t\tconsole.log(\"THIS IS USER DATA\");\n\t\tconsole.log(userData);\n\t\tconst updated = userData.projects.push(userData.projects[idz]);\n\t\tconsole.log(\"THIS IS UPDATED\");\n\t\tconsole.log(updated);\n\t\tuserRef.update({\n\t\t\t...userData,\n\t\t\tprojects: updated\n\t\t});\n\t});\n};\n\nexport const createProject = (project) => {\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\n\t\t// make async call to database\n\t\tconst firestore = getFirestore();\n\t\tconst profile = getState().firebase.profile;\n\t\tconst authorID = getState().firebase.auth.uid;\n\t\tfirestore\n\t\t\t.collection(\"projects\")\n\t\t\t.add({\n\t\t\t\t...project,\n\t\t\t\tauthorFirstName: profile.firstName,\n\t\t\t\tauthorLastName: profile.lastName,\n\t\t\t\tauthorID,\n\t\t\t\tcreatedAt: new Date()\n\t\t\t})\n\t\t\t.then((idx) => {\n\t\t\t\t// Add projectID to user\n\t\t\t\tappendProjectToUser(idx, firestore, authorID);\n\t\t\t\tdispatch({ type: \"CREATE_PROJECT\", project });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch({ type: \"CREATE_PROJECT_ERROR\", err });\n\t\t\t});\n\t};\n};\n\n/*\n\nNote to self from youtube comment\n\nJoel Greek\n1 year ago\nYou probably figured this out already since you wrote this 4 months ago but maybe someone else who watches this video now will ask the same question:\nOne could probably do this in the firestore cloud I guess. (Lesson 32), if you set the 'allow read, write: if request.auth.uid != userId'\nNot sure if this is best practice, (probably not), but it works. cheers!\n\n*/\n"]},"metadata":{},"sourceType":"module"}