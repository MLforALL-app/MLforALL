{"ast":null,"code":"import _objectSpread from\"/Users/lenny/Coding/Personal/MLforAll/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";export var createProject=function createProject(project){return function(dispatch,getState,_ref){var getFirebase=_ref.getFirebase,getFirestore=_ref.getFirestore;// make async call to database\nvar firestore=getFirestore();var profile=getState().firebase.profile;var authorID=getState().firebase.auth.uid;firestore.collection(\"projects\").add(_objectSpread(_objectSpread({},project),{},{authorFirstName:profile.firstName,authorLastName:profile.lastName,authorID:authorID,createdAt:new Date()})).then(function(){// tehn do this\ndispatch({type:\"CREATE_PROJECT\",project:project});}).catch(function(err){dispatch({type:\"CREATE_PROJECT_ERROR\",err:err});});};};/*\n\nNote to self from youtube comment\n\nJoel Greek\n1 year ago\nYou probably figured this out already since you wrote this 4 months ago but maybe someone else who watches this video now will ask the same question:\nOne could probably do this in the firestore cloud I guess. (Lesson 32), if you set the 'allow read, write: if request.auth.uid != userId'\nNot sure if this is best practice, (probably not), but it works. cheers!\n\n*/","map":{"version":3,"sources":["/Users/lenny/Coding/Personal/MLforAll/frontend/src/store/actions/projectActions.js"],"names":["createProject","project","dispatch","getState","getFirebase","getFirestore","firestore","profile","firebase","authorID","auth","uid","collection","add","authorFirstName","firstName","authorLastName","lastName","createdAt","Date","then","type","catch","err"],"mappings":"oKAAA,MAAO,IAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAa,CACzC,MAAO,UAACC,QAAD,CAAWC,QAAX,MAAuD,IAAhCC,CAAAA,WAAgC,MAAhCA,WAAgC,CAAnBC,YAAmB,MAAnBA,YAAmB,CAC7D;AACA,GAAMC,CAAAA,SAAS,CAAGD,YAAY,EAA9B,CACA,GAAME,CAAAA,OAAO,CAAGJ,QAAQ,GAAGK,QAAX,CAAoBD,OAApC,CACA,GAAME,CAAAA,QAAQ,CAAGN,QAAQ,GAAGK,QAAX,CAAoBE,IAApB,CAAyBC,GAA1C,CACAL,SAAS,CACPM,UADF,CACa,UADb,EAEEC,GAFF,gCAGKZ,OAHL,MAIEa,eAAe,CAAEP,OAAO,CAACQ,SAJ3B,CAKEC,cAAc,CAAET,OAAO,CAACU,QAL1B,CAMER,QAAQ,CAARA,QANF,CAOES,SAAS,CAAE,GAAIC,CAAAA,IAAJ,EAPb,IASEC,IATF,CASO,UAAM,CACX;AACAlB,QAAQ,CAAC,CAAEmB,IAAI,CAAE,gBAAR,CAA0BpB,OAAO,CAAPA,OAA1B,CAAD,CAAR,CACA,CAZF,EAaEqB,KAbF,CAaQ,SAACC,GAAD,CAAS,CACfrB,QAAQ,CAAC,CAAEmB,IAAI,CAAE,sBAAR,CAAgCE,GAAG,CAAHA,GAAhC,CAAD,CAAR,CACA,CAfF,EAgBA,CArBD,CAsBA,CAvBM,CAyBP","sourcesContent":["export const createProject = (project) => {\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\n\t\t// make async call to database\n\t\tconst firestore = getFirestore();\n\t\tconst profile = getState().firebase.profile;\n\t\tconst authorID = getState().firebase.auth.uid;\n\t\tfirestore\n\t\t\t.collection(\"projects\")\n\t\t\t.add({\n\t\t\t\t...project,\n\t\t\t\tauthorFirstName: profile.firstName,\n\t\t\t\tauthorLastName: profile.lastName,\n\t\t\t\tauthorID,\n\t\t\t\tcreatedAt: new Date()\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// tehn do this\n\t\t\t\tdispatch({ type: \"CREATE_PROJECT\", project });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch({ type: \"CREATE_PROJECT_ERROR\", err });\n\t\t\t});\n\t};\n};\n\n/*\n\nNote to self from youtube comment\n\nJoel Greek\n1 year ago\nYou probably figured this out already since you wrote this 4 months ago but maybe someone else who watches this video now will ask the same question:\nOne could probably do this in the firestore cloud I guess. (Lesson 32), if you set the 'allow read, write: if request.auth.uid != userId'\nNot sure if this is best practice, (probably not), but it works. cheers!\n\n*/\n"]},"metadata":{},"sourceType":"module"}